/**
 * Raven for Server-Side ActionScript
 *
 * Current limitations:
 * - Server-side actionscript cannot make requests to "https" URIs so this client is only useful
 *   if you are self-hosting a Sentry installation and allow non-secure access.
 */

(function(global) {

    var globalServer,
        globalUser,
        globalKey,
        globalProject,
        globalOptions = {
            logger: 'serverside-actionscript',
            ignoreUrls: []
        },
        hasJSON = !isUndefined(global.JSON),
        Raven = {
            VERSION: '0.0.1',

            /*
             * Configure Raven with a DSN and extra options
             *
             * @param {string} dsn The public Sentry DSN
             * @param {object} options Optional set of of global options [optional]
             * @return {Raven}
             */
            config: function(dsn, options) {
                if (!dsn) {
                    trace("Error: No DSN given to Raven.");
                    return false;
                }

                var uri = parseUri(dsn),
                    lastSlash = uri.path.lastIndexOf('/'),
                    path = uri.path.substr(1, lastSlash);

                // merge in options
                if (options) {
                    each(options, function(key, value){
                        globalOptions[key] = value;
                    });
                }

                globalKey = uri.user;
                globalProject = ~~uri.path.substr(lastSlash + 1);

                // assemble the endpoint from the uri pieces
                globalServer = '//' + uri.host +
                              (uri.port ? ':' + uri.port : '') +
                              '/' + path + 'api/' + globalProject + '/store/';

                if (uri.protocol) {
                    globalServer = uri.protocol + ':' + globalServer;
                }

                // return for chaining
                return Raven;
            },

            /*
             * Installs a global error handler to capture and report uncaught exceptions.
             *
             * @return {Raven}
             */
            install: function() {
                if (!isSetup()) return;

                application.onStatus = function(info) {
                    Raven.captureException({
                        type: info.code,
                        message: info.description,
                        stack: info.filename + ':' + info.lineno,
                        fileName: info.filename,
                        lineNumber: info.lineno
                    });
                };

                return Raven;
            },

            /*
             * Manually capture an exception and send it over to Sentry
             *
             * @param {error} ex An exception to be logged
             * @param {object} options A specific set of options for this error [optional]
             * @return {Raven}
             */
            captureException: function(ex, options) {
                // If a string is passed through, recall as a message
                if (typeof ex === 'string') {
                    return Raven.captureMessage(ex, options);
                }

                var frames = ex.stack
                    .split(/\(\)@|\n/)                                               // Split by @0 and newlines
                    .slice(1, -1)                                                    // Remove the first and last elements (always @0)
                    .filter(function(frame) { return frame && ('@:0' != frame); });  // Remove empty elements and @:0


                if (_.isEmpty(frames)) {
                    frames = [ex.stack];
                }

                frames = frames.map(function(frame) {                                          // Map to object with filename and lineno
                    var colon = frame.lastIndexOf(':');

                    return {
                        fileName: frame.substr(0, colon),
                        lineNo: frame.substr(colon+1)
                    };
                });

                // Fire away!
                send(
                    arrayMerge({
                        'sentry.interfaces.Exception': {
                            type: ex.type,
                            value: ex.message
                        },
                        'sentry.interfaces.Stacktrace': {
                            frames: frames
                        },
                        culprit: ex.fileName ? ex.fileName.substr(ex.fileName.lastIndexOf('\\')+1) : '',
                        message: ex.message
                    }, options)
                );

                return Raven;
            },

            /*
             * Manually send a message to Sentry
             *
             * @param {string} msg A plain message to be captured in Sentry
             * @param {object} options A specific set of options for this message [optional]
             * @return {Raven}
             */
            captureMessage: function(msg, options) {
                // Fire away!
                send(
                    arrayMerge({
                        message: msg
                    }, options)
                );

                return Raven;
            },

            /*
             * Set/clear a user to be sent along with the payload.
             *
             * @param {object} user An object representing user data [optional]
             * @return {Raven}
             */
            setUser: function(user) {
               globalUser = user;

               return Raven;
            }
        };

    var uriKeys = 'source protocol authority userInfo user password host port relative path directory file query anchor'.split(' '),
    uriPattern = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

    /**** Private functions ****/
    function parseUri(str) {
        var m = uriPattern.exec(str),
            uri = {},
            i = 14;

        while (i--) uri[uriKeys[i]] = m[i] || '';

        return uri;
    }

    function setTimeout(func, wait) {
        id = setInterval(function(){ clearInterval(id); func.apply(null, arguments); }, wait);
    }

    function isObject(obj) {
        return obj === Object(obj);
    }

    function arrayMerge(arr1, arr2) {
        if (!arr2) {
            return arr1;
        }
        each(arr2, function(key, value){
            arr1[key] = value;
        });
        return arr1;
    }

    function isUndefined(what) {
        return typeof what === 'undefined';
    }

    function each(obj, callback) {
        var i, j;

        if (isUndefined(obj.length)) {
            for (i in obj) {
                if (obj.hasOwnProperty(i)) {
                    callback.call(null, i, obj[i]);
                }
            }
        } else {
            for (i = 0, j = obj.length; i < j; i++) {
                callback.call(null, i, obj[i]);
            }
        }
    }

    function isSetup() {
        if (!application) return false;
        if (!hasJSON) return false;  // needs JSON support
        if (!globalServer) {
            trace("Error: Raven has not been configured.");
            return false;
        }
        return true;
    }

    function send(data) {
        var request = new LoadVars(),
            response = new LoadVars();

        response.onHTTPStatus = function(httpStatus) {
            if (200 !== httpStatus) {
                trace('Error contacting sentry server. Received HTTP Status: ' + httpStatus);
            }
        };

        if (globalUser) {
            request['sentry.interfaces.User'] = isObject(globalUser) ? JSON.stringify(globalUser) : globalUser;
        }

        data = arrayMerge({
            project: globalProject,
            logger: globalOptions.logger,
            platform: 'serverside-actionscript'
        }, data);

        request.sentry_data = JSON.stringify(data);
        request.sentry_version = '2.0';
        request.sentry_client = 'raven-ssas/' + Raven.VERSION;
        request.sentry_key = globalKey;

        return request.sendAndLoad(globalServer, response, "GET");
    }

    global.Raven = Raven;

})(this);
